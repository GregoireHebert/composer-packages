<?php

declare(strict_types=1);

namespace ComposerPackages;

use Composer\Package\CompletePackage;
use Composer\Package\PackageInterface;
use Composer\Package\Loader\ArrayLoader;

/**
 * This class is generated by drupol/composer-packages.
 *
 * This file is overwritten at every run of `composer install` or `composer update`.
 */
final class Dependencies implements \IteratorAggregate
{
    public const GENERATED_AT = {{ generatedAt }};
    public const ROOT_PACKAGE_NAME = '{{ rootPackageName }}';

    private const DEPENDENCIES = {{ packageDeps|export }};

    /**
     * @param string $type
     *
     * @return CompletePackage[]|\Generator
     *   A packages generator.
     */
    public static function get(string $type): \Generator
    {
        if (isset(self::DEPENDENCIES[$type])) {
            yield from self::getDependencies($type);
        }
    }

{% for type, data in packageDeps %}
    /**
     * Get dependencies of packages "{{ type }}".
     *
     * @return string[]|\Generator
     *   The package dependencies.
     */
    public static function {{ type|camelize }}(): \Generator
    {
        yield from self::getDependencies('{{ type }}');
    }

{% endfor %}
    /**
     * {@inheritdoc}
     *
     * @return CompletePackage[]|\Generator
     */
    public function getIterator(): \Generator
    {
        foreach (\array_keys(self::DEPENDENCIES) as $type) {
            yield $type => \iterator_to_array(self::getDependencies(self::DEPENDENCIES[$type]));
        }
    }

    /**
     * Get the dependencies of a package.
     *
     * @param string $packageName
     *   The package name.
     *
     * @return string[]|\Generator
     *   The package dependencies.
     */
    private static function getDependencies(string $packageName): \Generator
    {
        yield from self::DEPENDENCIES[$packageName];
    }
}
