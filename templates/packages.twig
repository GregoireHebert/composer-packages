<?php

declare(strict_types=1);

namespace ComposerPackages;

use Composer\Package\CompletePackage;
use Composer\Package\PackageInterface;
use Composer\Package\Loader\ArrayLoader;

/**
 * This class is generated by drupol/composer-packages.
 *
 * This file is overwritten at every run of `composer install` or `composer update`.
 */
final class Packages implements \Countable, \IteratorAggregate
{
    public const ROOT_PACKAGE_NAME = '{{ rootPackageName }}';
    public const GENERATED_AT = {{ generatedAt }};
    private const PACKAGES = {{ packages | export }};

    /**
     * @var Packages
     */
    private static $instance;

    /**
     * {@inheridoc}
     */
    public function count(): int
    {
        return \count(self::PACKAGES);
    }

    /**
     * Get a package.
     *
     * @param string $name
     *
     * @return null|CompletePackage
     *   A Composer package.
     */
    public static function get(string $name): ?CompletePackage
    {
        if (isset(self::PACKAGES[$name])) {
            return self::toPackage($name);
        }

        return null;
    }

{% for name, package in packages %}
    /**
     * Get the package "{{ name }}".
     *
     * @return CompletePackage
     *   A Composer package.
     */
    public static function {{ name | camelize }}(): PackageInterface
    {
        return self::toPackage('{{ name }}');
    }

{% endfor %}
    /**
     * {@inheritdoc}
     *
     * @return CompletePackage[]|\Generator
     */
    public static function find(callable $callable): \Generator
    {
        $instance = self::getInstance();

        foreach ($instance->getIterator() as $package) {
            if ($callable($package) === true) {
                yield $package;
            }
        }
    }

    /**
     * {@inheritdoc}
     *
     * @return CompletePackage[]|\Generator
     */
    public function getIterator(): \Generator
    {
        foreach (self::PACKAGES as $key => $package) {
            yield $key => (new ArrayLoader())->load($package);
        }
    }

    /**
     * Package generator as array, keyed by their name.
     *
     * @return array[]|\Generator
     */
    public static function packages(): \Generator
    {
        foreach (self::PACKAGES as $key => $package) {
            yield $key => $package;
        }
    }

    /**
     * Get an instance.
     *
     * @return Packages
     *   An instance of the class.
     */
    private static function getInstance(): self
    {
        if (null !== self::$instance) {
            return self::$instance;
        }

        self::$instance = new self();

        return self::$instance;
    }

    /**
     * @param string $package
     *   The package name.
     *
     * @return CompletePackage|PackageInterface
     *   A Composer package.
     */
    private static function toPackage(string $package): PackageInterface
    {
        return (new ArrayLoader())->load(self::PACKAGES[$package]);
    }
}
